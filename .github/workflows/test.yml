name: Test Suite

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run ruff linter
      run: |
        ruff check src/ tests/
    
    - name: Run ruff formatter check
      run: |
        ruff format --check src/ tests/
    
    - name: Run comprehensive test suite
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        MANGABAKA_BASE: "https://api.mangabaka.dev"
        POLL_INTERVAL_SEC: "0"
        AUTH_ENABLED: "false"
        DATA_DIR: "/tmp/test_data"
        PUSHOVER_APP_TOKEN: ""
        PUSHOVER_USER_KEY: ""
      run: |
        # Run the comprehensive test suite
        python scripts/run_tests.py --coverage --verbose
        
        # Run new API integration tests
        pytest tests/test_real_api.py -v
        pytest tests/test_notifications_simple.py -v
        pytest tests/test_integration_api_notifications.py -v
    
    - name: Run specific poller tests (critical for notifications)
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        MANGABAKA_BASE: "https://api.mangabaka.dev"
        POLL_INTERVAL_SEC: "0"
        AUTH_ENABLED: "false"
        DATA_DIR: "/tmp/test_data"
      run: |
        pytest tests/test_poller.py -v --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v
    
    - name: Test Docker build
      run: |
        docker build -t manganotify-test .
        docker run --rm manganotify-test python -c "import manganotify; print('Import successful')"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t manganotify:test .
    
    - name: Test Docker container
      run: |
        # Start container in background
        docker run -d --name manganotify-test \
          -p 8999:8999 \
          -e POLL_INTERVAL_SEC=0 \
          -e AUTH_ENABLED=false \
          manganotify:test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8999/api/health || exit 1
        
        # Test watchlist endpoint
        curl -f http://localhost:8999/api/watchlist || exit 1
        
        # Clean up
        docker stop manganotify-test
        docker rm manganotify-test
