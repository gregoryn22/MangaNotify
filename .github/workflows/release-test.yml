name: Release Testing

on:
  push:
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: true
        default: 'full'
        type: choice
        options:
        - quick
        - full
        - comprehensive

jobs:
  release-tests:
    name: Release Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run comprehensive test suite
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        MANGABAKA_BASE: "https://api.mangabaka.dev"
        POLL_INTERVAL_SEC: "0"
        AUTH_ENABLED: "false"
        DATA_DIR: "/tmp/test_data"
        PUSHOVER_APP_TOKEN: ""
        PUSHOVER_USER_KEY: ""
      run: |
        # Run the full test suite with coverage
        python scripts/run_tests.py --coverage --verbose
    
    - name: Run Chainsaw Man scenario test
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        MANGABAKA_BASE: "https://api.mangabaka.dev"
        POLL_INTERVAL_SEC: "0"
        AUTH_ENABLED: "false"
        DATA_DIR: "/tmp/test_data"
      run: |
        # Specifically test the scenario that caused issues
        pytest tests/test_poller.py::TestMissedNotificationScenario -v --tb=short
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  docker-release-test:
    name: Docker Release Testing
    runs-on: ubuntu-latest
    needs: release-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build release Docker image
      run: |
        docker build -t manganotify-release-test .
    
    - name: Test Docker container functionality
      run: |
        # Start container
        docker run -d --name manganotify-release-test \
          -p 8999:8999 \
          -e POLL_INTERVAL_SEC=0 \
          -e AUTH_ENABLED=false \
          manganotify-release-test
        
        # Wait for startup
        sleep 15
        
        # Test all critical endpoints
        curl -f http://localhost:8999/api/health || exit 1
        curl -f http://localhost:8999/api/watchlist || exit 1
        curl -f http://localhost:8999/api/auth/status || exit 1
        
        # Test import/export functionality
        echo '[{"id": 123, "title": "Test", "total_chapters": 1, "last_read": 0, "status": "reading"}]' | \
          curl -X POST -H "Content-Type: application/json" -d @- http://localhost:8999/api/watchlist/import || exit 1
        
        # Clean up
        docker stop manganotify-release-test
        docker rm manganotify-release-test
    
    - name: Test Docker image size
      run: |
        # Check that image isn't too large
        SIZE=$(docker images manganotify-release-test --format "{{.Size}}" | sed 's/[^0-9.]*//g')
        echo "Docker image size: ${SIZE}MB"
        # Alert if image is larger than 500MB
        if (( $(echo "$SIZE > 500" | bc -l) )); then
          echo "⚠️ Docker image is larger than 500MB"
        fi

  security-release-scan:
    name: Security Release Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
    
    - name: Run comprehensive security scan
      run: |
        # Bandit security scan
        bandit -r src/ -f json -o bandit-report.json || true
        
        # Safety check for known vulnerabilities
        safety check --json --output safety-report.json || true
        
        # Semgrep for additional security patterns
        semgrep --config=auto src/ --json --output=semgrep-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: release-security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: release-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run performance tests
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        MANGABAKA_BASE: "https://api.mangabaka.dev"
        POLL_INTERVAL_SEC: "0"
        AUTH_ENABLED: "false"
        DATA_DIR: "/tmp/test_data"
      run: |
        # Run tests with timing
        pytest tests/test_poller.py --durations=10 -v
        pytest tests/test_api_endpoints.py --durations=10 -v
