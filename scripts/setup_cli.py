#!/usr/bin/env python3
"""
Command-line setup script for MangaNotify.

Usage:
    python scripts/setup_cli.py
"""

import os
import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from manganotify.core.crypto import encrypt_credential, generate_master_key
from manganotify.auth import get_password_hash

def get_input(prompt: str, required: bool = True, password: bool = False) -> str:
    """Get user input with validation."""
    while True:
        if password:
            import getpass
            value = getpass.getpass(prompt)
        else:
            value = input(prompt).strip()
        
        if not required or value:
            return value
        print("This field is required.")

def main():
    print("🔧 MangaNotify CLI Setup Wizard")
    print("=" * 40)
    
    # Authentication setup
    print("\n🔐 Authentication Setup")
    auth_enabled = input("Enable authentication? (y/N): ").lower().startswith('y')
    
    username = "admin"
    password = ""
    auth_secret_key = ""
    
    if auth_enabled:
        username = get_input("Username (default: admin): ", required=False) or "admin"
        password = get_input("Password (min 8 chars): ", password=True)
        
        if len(password) < 8:
            print("Error: Password must be at least 8 characters long.")
            return
        
        auth_secret_key = generate_master_key()
        print(f"✅ Generated secure JWT secret key")
    
    # Notification setup
    print("\n📱 Notification Setup (Optional)")
    pushover_app_token = get_input("Pushover App Token (optional): ", required=False)
    pushover_user_key = get_input("Pushover User Key (optional): ", required=False)
    discord_webhook = get_input("Discord Webhook URL (optional): ", required=False)
    
    # Generate master key for encryption
    master_key = generate_master_key()
    
    # Generate .env content
    env_content = "# MangaNotify Configuration\n"
    env_content += "# Generated by CLI setup wizard\n\n"
    
    # Authentication
    if auth_enabled:
        env_content += "# Authentication\n"
        env_content += f"AUTH_ENABLED=true\n"
        env_content += f"AUTH_USERNAME={username}\n"
        env_content += f"AUTH_PASSWORD={get_password_hash(password)}\n"
        env_content += f"AUTH_SECRET_KEY={auth_secret_key}\n"
        env_content += f"AUTH_TOKEN_EXPIRE_HOURS=24\n\n"
    else:
        env_content += "# Authentication\n"
        env_content += f"AUTH_ENABLED=false\n\n"
    
    # Notifications (encrypted)
    if pushover_app_token or pushover_user_key or discord_webhook:
        env_content += "# Notifications (encrypted)\n"
        if pushover_app_token:
            encrypted_token = encrypt_credential(pushover_app_token, master_key)
            env_content += f"PUSHOVER_APP_TOKEN={encrypted_token}\n"
        if pushover_user_key:
            encrypted_key = encrypt_credential(pushover_user_key, master_key)
            env_content += f"PUSHOVER_USER_KEY={encrypted_key}\n"
        if discord_webhook:
            encrypted_webhook = encrypt_credential(discord_webhook, master_key)
            env_content += f"DISCORD_WEBHOOK_URL={encrypted_webhook}\n"
            env_content += f"DISCORD_ENABLED=true\n"
        env_content += "\n"
    
    # Other settings
    env_content += "# Other Settings\n"
    env_content += f"CORS_ALLOW_ORIGINS=*\n"
    env_content += f"LOG_LEVEL=INFO\n"
    env_content += f"LOG_FORMAT=plain\n"
    env_content += f"POLL_INTERVAL_SEC=1800\n"
    env_content += f"PORT=8999\n"
    env_content += f"DATA_DIR=./data\n\n"
    
    # Master key
    env_content += "# Master encryption key (KEEP SECURE!)\n"
    env_content += f"MASTER_KEY={master_key}\n"
    
    # Save to .env file
    env_file = Path(".env")
    if env_file.exists():
        backup = Path(".env.backup")
        env_file.rename(backup)
        print(f"📁 Backed up existing .env to {backup}")
    
    env_file.write_text(env_content)
    print(f"✅ Configuration saved to {env_file}")
    
    print("\n🎉 Setup complete!")
    print("\nNext steps:")
    print("1. Review the generated .env file")
    print("2. Change CORS_ALLOW_ORIGINS from '*' to your domain in production")
    print("3. Start the application: uvicorn src.manganotify.main:app --host 0.0.0.0 --port 8999")
    print("4. Visit http://localhost:8999 to access MangaNotify")

if __name__ == "__main__":
    main()
